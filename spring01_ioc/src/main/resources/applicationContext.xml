<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--<bean id="userDao" class="com.jin.dao.impl.UserDaoImpl"></bean>-->

    <!--<bean id="userDao" class="com.jin.factory.StaticFactory" factory-method="getUserDao"></bean>-->

    <!--<bean id="factory" class="com.jin.factory.DynamicFactory"></bean>
    <bean id="userDao" factory-bean="factory" factory-method="getUserDao"/>-->


    <!--<bean id="userDao" class="com.jin.dao.impl.UserDaoImpl">
        <property name="username" value="zhangsan"/>
        <property name="age" value="18"/>
    </bean>-->

    <!-- spring中的依赖注入
      依赖注入：
          Dependency Injection
      IOC的作用：
          降低程序间的耦合（依赖关系）
      依赖关系的管理：
          以后都交给spring来维护
      在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
      依赖关系的维护：
          就称之为依赖注入。
       依赖注入：
          能注入的数据：有三类
              基本类型和String
              其他bean类型（在配置文件中或者注解配置过的bean）
              复杂类型/集合类型
           注入的方式：有三种
              第一种：使用构造函数提供
              第二种：使用set方法提供
              第三种：使用注解提供（明天的内容）
   -->


    <!--构造函数注入：
        使用的标签:constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
            name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <bean id="userDao" class="com.jin.dao.impl.UserDaoImpl">
        <property name="strList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="userMap">
            <map>
                <entry key="u1" value-ref="user1"></entry>
                <entry key="u2" value-ref="user2"></entry>
            </map>
        </property>
        <property name="properties">
            <props>
                <prop key="p1">ppp1</prop>
                <prop key="p2">ppp2</prop>
                <prop key="p3">ppp3</prop>
            </props>
        </property>
    </bean>

    <bean id="user1" class="com.jin.domain.User">
        <property name="name" value="tom"/>
        <property name="addr" value="beijing"/>
    </bean>
    <bean id="user2" class="com.jin.domain.User">
        <property name="name" value="lucy"/>
        <property name="addr" value="tianjin"/>
    </bean>

    <!--<bean id="userService" class="com.jin.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDao"></property>
    </bean>-->

    <!--<bean id="userService" class="com.jin.service.impl.UserServiceImpl" p:userDao-ref="userDao"/>-->

    <bean id="userService" class="com.jin.service.impl.UserServiceImpl">
        <constructor-arg name="userDao" ref="userDao"></constructor-arg>
    </bean>

    <bean id="userService2" class="com.jin.service.impl.UserServiceImpl">
        <constructor-arg name="userDao" ref="userDao"></constructor-arg>
    </bean>

    <!--<import resource="applicationContext-user.xml"/>
    <import resource="applicationContext-product.xml"/>-->

</beans>